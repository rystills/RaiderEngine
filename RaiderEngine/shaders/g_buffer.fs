#version 330 core
layout (location = 0) out vec3 gPosition;
layout (location = 1) out vec3 gNormal;
layout (location = 2) out vec4 gAlbedoSpec;

in VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
    mat3 TBN;
	vec3 TangentViewPos;
    vec3 TangentFragPos;
} fs_in;

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;
uniform sampler2D texture_normal1;
uniform sampler2D texture_height1;

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir) {
	//for correct parallax mapping, be sure to invert the displacement map generated by crazybump, so as to create depth, rather than height
    // TODO: map sizes have been substantially increased; increase heightScale to compensate if necessary
	const float heightScale = .05;
	// number of depth layers
    const float minLayers = 8;
	// note: increasing maxLayers will improve POM greatly, at substantial performance cost. Recommended range: 32-256
    const float maxLayers = 32;
    float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));  
    // calculate the size of each layer
    float layerDepth = 1.0 / numLayers;
    // depth of current layer
    float currentLayerDepth = 0.0;
    // the amount to shift the texture coordinates per layer (from vector P)
    vec2 P = viewDir.xy / viewDir.z * heightScale; //heightScale hardcoded to a small value; 
    vec2 deltaTexCoords = P / numLayers;
  
    // get initial values
	// flip my y if your POM is inverted vertically (seems to be resolved now; either due to updating assimp or switching map files from DAE to FBX)
    vec2  currentTexCoords     = vec2(texCoords.x, texCoords.y);
    float currentDepthMapValue = texture(texture_height1, currentTexCoords).r;
      
    while(currentLayerDepth < currentDepthMapValue)
    {
        // shift texture coordinates along direction of P
        currentTexCoords -= deltaTexCoords;
        // get depthmap value at current texture coordinates
        currentDepthMapValue = texture(texture_height1, currentTexCoords).r;  
        // get depth of next layer
        currentLayerDepth += layerDepth;  
    }
    
    // get texture coordinates before collision (reverse operations)
    vec2 prevTexCoords = currentTexCoords + deltaTexCoords;

    // get depth after and before collision for linear interpolation
    float afterDepth  = currentDepthMapValue - currentLayerDepth;
    float beforeDepth = texture(texture_height1, prevTexCoords).r - currentLayerDepth + layerDepth;
 
    // interpolation of texture coordinates
    float weight = afterDepth / (afterDepth - beforeDepth);
    vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);

    return finalTexCoords;
}

void main() {
	// offset texture coordinates with Parallax Mapping
    vec3 viewDir = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);
    vec2 texCoords = fs_in.TexCoords;
    
    texCoords = ParallaxMapping(fs_in.TexCoords,  viewDir);

	// discard transparent pixels
	if(texture(texture_diffuse1, texCoords).a < .5)
        discard;
	// uncomment me to discard texture coordinates outside the [0:1] range; creates dynamic silhouette but causes black borders between perpendicular faces and breaks tiling     
//    if(texCoords.x > 1.0 || texCoords.y > 1.0 || texCoords.x < 0.0 || texCoords.y < 0.0)
//        discard;    
    // store the fragment position vector in the first gbuffer texture
    gPosition = fs_in.FragPos;
    
	// also store the per-fragment normals into the gbuffer
	// TODO: support a variable number of maps of each type per model
	// TODO: use another shader for models that use the default (blank) heightMap so as not to waste performance on useless POM calculations (same with other maps)
	// for correct normals, make sure your crazybump settings are configured to y-axis up, x-axis right
	// if using materialize instead, you'll need to flip the x axis (r channel) in gimp
    gNormal = normalize( 2.0 * texture(texture_normal1, texCoords).rgb - vec3(1.0)) * fs_in.TBN;
	
    // and the diffuse per-fragment color
    gAlbedoSpec.rgb = texture(texture_diffuse1, texCoords).rgb;
    // store specular intensity in gAlbedoSpec's alpha component
    gAlbedoSpec.a = texture(texture_specular1, texCoords).r;
}